<div class="jp-audio" id="cPlayer" data-turbolinks-permanent>
  <div class="container">
    <div class="jp-interface">
      <% if current_user %>
        <%= link_to playlist_path(current_user), class: "btn c-btn-white jp-player-btn" do %>
          <%= image_tag 'icons/play.png' %>
          PLAYER
        <% end %>
      <% end %>
      
      <div class="jp-controls">
        <div class="jp-current-time" role="timer" aria-label="time">&nbsp;</div>
        <button class="jp-previous" role="button" tabindex="0"></button>
        <button class="jp-play" role="button" tabindex="1"></button>
        <%= image_tag 'icons/loading.gif', class: 'track-load' %>
        <button class="jp-next" role="button" tabindex="2"></button>
        <div class="jp-duration" role="timer" aria-label="duration">&nbsp;</div>

        <div class="jp-volume-controls">
          <button class="jp-volume-btn" tabindex="3"><%= show_svg('icons/volume-high.svg') %></button>

          <div class="jp-volume d-none">
            <!-- <button class="jp-mute" role="button" tabindex="4">mute</button> -->
            <div class="jp-volume-bar">
              <div class="jp-volume-bar-value"></div>
            </div>
             <!-- <div class="jp-seek-bar" style="width: 150px">
              <div class="jp-play-bar"></div>
            </div> -->
            <!-- <button class="jp-volume-max" role="button" tabindex="5">max</button> -->
          </div>
        </div>
      </div>

      <div class="jp-details">
        <% if current_user && (current_user.cahced_active_subscription? || 
              current_user.has_role?(:admin) ||
              current_user.has_role?(:artist) ) %>

          <button id="jp-release-playlist-btn" style="display: none;">
            <%= image_tag 'icons/r-playlist.png' %>
          </button>

        <% end %>

        <div class="jp-title" aria-label="title">&nbsp;</div>
      </div>

      <% if current_user && (current_user.cahced_active_subscription? || 
            current_user.has_role?(:admin) ||
            current_user.has_role?(:artist) ) %>

        <% if @credits %>
          <div class="credits-menu">
            <button type="button" data-toggle="collapse" data-target="#credits-count" aria-expanded="false" aria-controls="collapseExample" class="credits-btn">
              <%= pluralize(@credits, "Credit") %>
            </button>

            <div id="credits-count" class="collapse credits-dropdown">
              <span class="text-nowrap mb-1 d-inline-block">
                You have <%= @credits %> download credits
              </span>
              <%=link_to "Buy More", get_more_credits_path, class: "btn c-btn-blue c-btn-sm" %>
            </div>
          </div>
        <% end %>

        <button id="jp-playlist-btn" class="mr-4">
          <%= image_tag 'icons/playlist.png' %>
        </button>
      <% end %>

      <div class="jp-progress-container" style="width: 200px">
        <div id="waveform"></div>
      </div>
    </div>

    <div class="jp-release-playlist" style="display: none;">
    </div>

    <div class="jp-playlist" style="display: none;">
      
      <% if current_user %>
        <div class="jp-playlist-name"></div>
        <ul></ul>
        <div class="jp-playlist-footer">
          <%= link_to "Create playlist", new_playlist_path, remote: true %>
          <a href="#" data-toggle="collapse" data-target="#jp-playlist-popover" aria-expanded="false" aria-controls="collapseExample" class="jp-playlist-open-btn">
            Load playlist
          </a>

          <div id="jp-playlist-popover" class="collapse playlist-popover-collapse">
            <% for playlist in current_user.playlists %>
              <button class="select-playlist" data-playlist-id="<%= playlist.id %>">
                <%= "#{playlist.name}: #{pluralize(playlist.tracks_count, "Track")}" %>
              </button>
              <br>
            <% end %>
          </div>
        </div>
      <% else %>

      <% end %>
    </div>
  </div>
</div>

<script type="text/javascript" data-turbolinks-eval="false">
  //playlist can be virual (play and display on player title, 
  //don't display on playlist menu, don't sync with the server, 
  //just for observe listening the music)
  var playlist = [];
  var currentTrackIndex;

  var cpAudio = WaveSurfer.create({
      container: '#waveform',
      waveColor: '#3ed4e0',
      progressColor: '#e75e35',
      height: 40,
      barWidth: 2
  });

  var cpAudio2 = WaveSurfer.create({
      container: '#waveform',
      waveColor: '#3ed4e0',
      progressColor: '#e75e35',
      height: 40,
      barWidth: 2
  });

  $('.jp-current-time').text(secondsToHms(0));
  $('.jp-duration').text(secondsToHms(0));

  trackLoading(true);
  
  $.ajax( "/playlist_load" )
    .done(function(data) {
      var time;
      $('.jp-playlist').data('currentPlaylistId', data.playlist_id);

      if (data.current_track) {
        currentTrackIndex = data.current_track.index;
        time = data.current_track.time;
      } else {
        currentTrackIndex = 0; time = 0;
      }

      $('.jp-playlist-name').html(data.playlist_name_form);
      setPlaylist(data.tracks, {
        play: false, 
        currentTrack: currentTrackIndex, 
        currentTime: time, 
        virtual: false, 
        newPlaylist: true, 
        sourceType: 'playlist', 
        sourceId: data.playlist_id
      });
    });

  var start = new Date().getTime();
  var sent = false;

  function timerAndLoadingForAudio(audio) {

    audio.on('audioprocess', function () {
      if (new Date().getTime() - start > 1000 ) {
        var current_time = audio.getCurrentTime();
        $('.jp-current-time').text(secondsToHms(current_time));
        $(`[data-track=${playlist[currentTrackIndex].id}]`)
            .siblings('.jp-current-time-track')
            .text(secondsToHms(current_time));

        var duration = audio.getDuration();
        if (current_time/duration < 0.8) {sent = false}
        if (current_time/duration > 0.8 && !sent){
          $.ajax({
            url: '/track_listened',
            dataType: 'JSON',
            data: { id: playlist[currentTrackIndex].id }
          });
          sent = true;
        }

        start = new Date().getTime();
      }
    });

    audio.on('ready', function(){
      trackLoading(false);
    });
  }

  timerAndLoadingForAudio(cpAudio);

  function setPlaylist(tracks=[], options={}) {
    var play = options.play;
    var currentTrack = options.currentTrack;
    var currentTime = options.currentTime || 0;
    var virtual = options.virtual;
    var newPlaylist = options.newPlaylist;
    var sourceType = options.sourceType || $('.jp-audio .jp-play').data('sourceType');
    var sourceId = options.sourceId || $('.jp-audio .jp-play').data('sourceId');

    if (currentTrack !== undefined) {
      currentTrackIndex = currentTrack;
    }

    if (virtual) {
      playlist = tracks; //setting common playlist variable;
      playerLoad(currentTime, virtual);
    } else if (newPlaylist) {
      playlist = tracks; //setting common playlist variable;
      addItemsToPlaylist({newPlaylist: true, sourceType: sourceType, sourceId: sourceId});
      playerLoad(currentTime, virtual); 
    } else {
      if ($('.jp-audio .jp-play').data('virtual')) {
        playlist = tracks; //setting common playlist variable;
        // playerLoad(0, false);
      } else {
        playlist.concat(tracks);
      }

      addItemsToPlaylist({tracks: tracks, sourceType: sourceType, sourceId: sourceId});

      $.post('/sync_playlist', 
        { add_tracks_ids: tracks.map(x => x['id']) });    
      return false;
    }

    if (play) { 
      cpAudio.on('ready', function(){
        cpAudio.play();
        updatePlayerState(sourceType, sourceId, currentTrackIndex, virtual);
        return false;
      });
    }

    updatePlayerState(sourceType, sourceId, currentTrackIndex, virtual);
  }

  $('.jp-audio .jp-play').click(function(){
    playButton(this);
  });

  $('.jp-audio .jp-previous').click(function(){
    playPrevious();
  });

  $(document).on('click', '.select-playlist', function(e){
    e.preventDefault();
    var playlistId = $(this).data('playlistId');
    $('.select-playlist').parent('li').removeClass('active');
    $(".select-playlist[data-playlist-id='" + playlistId + "']")
      .parent('li')
      .addClass('active');

    $.ajax({ 
        url: "/playlist_load",
        dataType: 'JSON',
        data: { playlist_id: playlistId }
      })
      .done(function(data) {
        var time;
        $('.jp-playlist').data('currentPlaylistId', playlistId);

        if (data.current_track) {
          currentTrackIndex = data.current_track.index;
          time = data.current_track.time;
        } else {
          currentTrackIndex = 0; time = 0;
        }

        $('.jp-playlist-name').html(data.playlist_name_form);
        setPlaylist(data.tracks, {
          play: true, 
          currentTrack: currentTrackIndex, 
          currentTime: time, 
          virtual: false, 
          newPlaylist: true, 
          sourceType: 'playlist', 
          sourceId: playlistId
        });
        $('#jp-playlist-popover').removeClass('show');
    });
  });

  $(document).on('click', '.playlist-add-track', function(e){
    e.preventDefault();
    var trackId = $(this).data('trackId');
    $.ajax({ 
        url: `/tracks/${trackId}`,
        dataType: 'JSON'
      })
      .done(function(track) {
        setPlaylist([track], {
          virtual: false, 
          newPlaylist: false,
          sourceType: 'playlist',
          sourceId: $('.jp-playlist').data('currentPlaylistId')
        });
      });
  });

  $('.jp-audio').on('change', '.jp-playlist', function(){
    if($(this).find('li').length < 2) {
      $('.jp-previous').addClass('jp-disabled');
      $('.jp-next').addClass('jp-disabled');
    } else {
      $('.jp-previous').removeClass('jp-disabled');
      $('.jp-next').removeClass('jp-disabled');
    }
  });

  $('.jp-playlist').on('click', '.jp-playlist-item', function(e){
    e.preventDefault();
    playButton(this);
  });

  $('.jp-playlist').on('click', '.jp-playlist-item-remove', function(e){
    e.preventDefault();
    let index = $(this).closest('ul').find('li').index($(this).closest('li'));
    removeFromPlaylist(index);
  });

  function newPlaylist() {
    currentTrackIndex = 0;
    playlist = [];
    $('.jp-playlist ul').html('');
  }

  function removeFromPlaylist(index) {
    let item = $('.jp-playlist li').get(index);
    let active = $(item).find('.jp-playlist-current').length > 0;
    item.remove();
    $('.jp-playlist').trigger('change');
    if (!$('.jp-audio .jp-play').data('virtual')) {
      playlist.splice(index,1);
    }

    if (active) {
      if (currentTrackIndex >= playlist.length) {
        currentTrackIndex = playlist.length - 1;
      }

      playerLoad(0, false);

      cpAudio.on('ready', function(){
        cpAudio.play();
        updatePlayerState('playlist', $('.jp-audio .jp-play').data('sourceId'), currentTrackIndex, false);
      });
    }

    $.post('/sync_playlist', 
      { delete_by_indices: [index], current_track_index: currentTrackIndex });    
  }

  function playButton(button) {
    var topData = $('.jp-audio .jp-play').data();
    var btnData = $(button).data();
    var sameSource = topData.sourceType == btnData.sourceType && 
                     topData.sourceId == btnData.sourceId;
    var sameIndex = topData.trackIndex == btnData.trackIndex;

    if ( (sameSource && btnData.trackIndex === undefined) ||
         (sameSource && btnData.trackIndex !== undefined && sameIndex) ) {
      cpAudio.isPlaying() ? cpAudio.pause() : cpAudio.play();
      updatePlayerState(topData.sourceType, topData.sourceId, topData.trackIndex, !!btnData.virtual);
    } else if (sameSource && btnData.trackIndex !== undefined && !sameIndex) {
      currentTrackIndex = btnData.trackIndex;
      playerLoad(0, !!btnData.virtual);

      cpAudio.on('ready', function(){
        cpAudio.play();
        updatePlayerState(btnData.sourceType, btnData.sourceId, btnData.trackIndex, !!btnData.virtual);
      });
    } else {
      $.ajax({
          url: '/tracks_play',
          dataType: 'JSON',
          data: { source_type: btnData.sourceType, source_id: btnData.sourceId }
        })
        .done(function(data){
          setPlaylist(data.tracks, {
            play: true, 
            currentTrack: btnData.trackIndex || 0, 
            currentTime: 0, 
            virtual: !!btnData.virtual, 
            newPlaylist: true, 
            sourceType: btnData.sourceType, 
            sourceId: btnData.sourceId
          });
      });
    }
  }

  // function playRelease(id) {}

  function playlistItem(track, sourceType, sourceId, index) {
    var _class, _data;
    if (index) {
      _class = `index-${index}`;
      _data = `data-track-index="${index}"`;
    } else {
      _class = `track-${track.id}`;
      _data = `data-track-id="${track.id}" data-track-index="${index}"`;
    }

    return `<li>
              <div>
                <a href="#" class="jp-playlist-item-remove">-</a>
                <a href="#" class="jp-playlist-item play-${sourceType}-${sourceId}-${_class}" data-source-type="${sourceType}" data-source-id="${sourceId}" ${_data} data-virtual="false" tabindex="0">${track.title} - ${track.artists}</a>
              </div>
            </li>`
  }

  function addItemsToPlaylist(options={}) {
    var newPlaylist = options.newPlaylist;
    var sourceType = options.sourceType;
    var sourceType = options.sourceType;
    var sourceId = options.sourceId;
    var tracks = newPlaylist ? playlist : options.tracks;
    if (newPlaylist) {
      $('.jp-playlist ul').html('');
    }
    tracks.forEach(function(track) {
      var i = $('.jp-playlist .jp-playlist-item').last().data('trackIndex') + 1 || 0;
      $('.jp-playlist ul')
        .append(playlistItem(track, sourceType, sourceId, i))
        .trigger('change');
    });
  }

  function playerLoad(currentTime=0, virtual=false) {
    trackLoading(true, );

    if (playlist.length < 1) {
      trackLoading(false);
      return;
    };

    cpAudio.load(playlist[currentTrackIndex].mp3);
    changePlayerTitle(playlist[currentTrackIndex]);

    cpAudio.on('ready', function(){
      trackLoading(false);
      
      cpAudio.skip(currentTime);
      $('.jp-current-time').text(secondsToHms(currentTime));
      $('.jp-duration').text(secondsToHms(cpAudio.getDuration()));
      $(`[data-track=${playlist[currentTrackIndex].id}]`)
          .siblings('.jp-duration-track')
          .text(secondsToHms(cpAudio.getDuration()));

      if(playlist[currentTrackIndex + 1] != undefined &&
          playlist[currentTrackIndex + 1].mp3) {
        cpAudio2.load(playlist[currentTrackIndex + 1].mp3);
      }
    });

    if (!virtual) {
      $.post('/sync_playlist', 
        { current_track: currentTrackIndex }); 
    }
  }

  function playNext(paused=false) {
    var sourceType = $('.jp-audio .jp-play').data('sourceType');
    var sourceId = $('.jp-audio .jp-play').data('sourceId');
    var virtual = $('.jp-audio .jp-play').data('virtual');

    if (playlist[currentTrackIndex + 1] === undefined) {
      return false;
    }

    currentTrackIndex++;
    playerLoad(0, virtual);


    if (paused) {
      updatePlayerState(sourceType, sourceId, currentTrackIndex, virtual);
    } else {
      cpAudio.on('ready', function(){
        cpAudio.play();
        updatePlayerState(sourceType, sourceId, currentTrackIndex, virtual);
      });
    }
  }

  cpAudio.on("finish", playNext);

  function playPrevious() {
    var sourceType = $('.jp-audio .jp-play').data('sourceType');
    var sourceId = $('.jp-audio .jp-play').data('sourceId');
    var virtual = $('.jp-audio .jp-play').data('virtual');

    if (playlist[currentTrackIndex - 1] == undefined) {
      return false;
    }  

    currentTrackIndex--;
    playerLoad(0, virtual);

    cpAudio.on('ready', function(){
      cpAudio.play();
      updatePlayerState(sourceType, sourceId, currentTrackIndex, virtual);
    });
  }

  function changePlayerTitle(t) {
    $('.jp-title').html('<a href="/releases/' + t.release_id + '">' + t.track_number + '. ' + t.title + ' - <b>' + t.artists + '</b></a>');
    $.get('/fill_track_title', {track_id: t.id});
  }

  function trackLoading(state, sourceType, sourceId) {

    if(state) {
      $('.track-load').show();
      $('.jp-audio .jp-play').hide();
      $('.jp-progress-container').addClass('loading');
      $(`.jp-playlist-item`).removeClass('loading');
      $(`.play-${sourceType}-${sourceId}`).addClass('loading');
      $(`.play-${sourceType}-${sourceId}-index-${currentTrackIndex}`).addClass('loading');

      if (playlist[currentTrackIndex]) {
        $(`.play-${sourceType}-${sourceId}-track-${playlist[currentTrackIndex].id}`).addClass('loading');
      }
    } else {
      $('.track-load').hide();
      $('.jp-audio .jp-play').show();
      $('.jp-progress-container').removeClass('loading');
      $(`[class^='play-']`).removeClass('loading');
    }
  }

  var draggedBars = [
    ['.jp-volume-bar','.jp-volume-bar-value','volume']
  ]
  dragBars(draggedBars);

  function dragBars(bars) {
    var audio = cpAudio;
    var drag = false;
    var e = {}, eInner = {}, updateBar = {};
    document.addEventListener('mouseup',function(ev){
     drag = false;
    });
    bars.forEach(function(bar){
      document.addEventListener('mousemove',function(ev){
         if(drag){
            updateBar[bar[2]](ev.clientX);
         }
      });
      e[bar[2]] = document.querySelector(bar[0]);
      eInner[bar[2]] = document.querySelector(bar[1]);
      e[bar[2]].addEventListener('mousedown',function(ev){
         drag = true;
         updateBar[bar[2]](ev.clientX);
      });
      updateBar[bar[2]] = function (x, vol) {
         var volume = e[bar[2]];
              var percentage;
              if (vol) {
                  percentage = vol * 100;
              } else {
                  var position = x - volume.offsetLeft;
                  percentage = 100 * position / volume.clientWidth;
              }

              if (percentage > 100) {
                  percentage = 100;
              }
              if (percentage < 0) {
                  percentage = 0;
              }

              eInner[bar[2]].style.width = percentage +'%';
              if(bar[2] == 'volume') {
                audio.setVolume(percentage / 100);
              } else if(bar[2] == 'progress') {
                // audio.currentTime = Math.round(audio.duration * percentage / 100);
              }
      };
    });
  }

  function secondsToHms(d) {
    d = Number(d);
    var h = Math.floor(d / 3600);
    var m = Math.floor(d % 3600 / 60);
    var s = Math.floor(d % 3600 % 60);
    return ((h > 0 ? h + ":" + (m < 10 ? "0" : "") : "") + m + ":" + (s < 10 ? "0" : "") + s);
  }

  //should be called after play action if play
  function updatePlayerState(
    sourceType = $('.jp-audio .jp-play').data('sourceType'), 
    sourceId = $('.jp-audio .jp-play').data('sourceId'), 
    trackIndex,
    virtual = $('.jp-audio .jp-play').data('virtual') 
    ) {

    if (!sourceType) return false;

    var trackId;

    if (trackIndex !== undefined) {
      trackId = playlist[trackIndex].id;
    } else {
      trackId = $('.jp-audio .jp-play').data('trackId');
      trackIndex = $('.jp-audio .jp-play').data('trackIndex');
    }

    $('.jp-audio .jp-play').data({ 
          sourceType: sourceType, 
          sourceId: sourceId, 
          trackId: trackId,
          trackIndex: trackIndex,
          virtual: virtual
        });

    $('.jp-audio .jp-play').removeClass('jp-playing');
    $("[class^='play-']").removeClass('playing');
    if (cpAudio.isPlaying()) {
      $('.jp-audio .jp-play').addClass('jp-playing');
      $(`.play-${sourceType}-${sourceId}`).addClass('playing');
      $(`.play-${sourceType}-${sourceId}-track-${trackId}`).addClass('playing');
      $(`.play-${sourceType}-${sourceId}-index-${trackIndex}`).addClass('playing');
    }

    $('.jp-playlist li').find('.jp-playlist-item').removeClass('jp-playlist-current');
    
    if (!virtual) {
      $($('.jp-playlist li').get(currentTrackIndex)).find('.jp-playlist-item').addClass('jp-playlist-current');
    }
  }

  $('#jp-playlist-btn').click(function() {
    $('.jp-playlist').slideToggle(300, function() {
      if ($(this).is(':visible'))
          $(this).css('display','inline-block');
    });
  });

  $('#jp-release-playlist-btn').click(function() {
    $('.jp-release-playlist')
          .css({ 'left': $(this).offset().left - 35 })
          .slideToggle(300, function() {
      if ($(this).is(':visible'))
          $(this).css('display','inline-block');
    });
  });

  $('.jp-playlist-name').on('click', '.playlist-name-btn', function(e){
    e.preventDefault();
    $(this).hide().next('form').show().css('display','inline-block');
  });

  $('.jp-volume-btn').click(() => {
    $('.jp-volume').toggleClass('d-flex').toggleClass('d-none');
  });
</script>
